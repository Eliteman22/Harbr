//
// Animation2View.swift
// Generated by Core Animator version 1.0.3 on 8/26/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class Animation2View : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	init() {
		super.init(frame: CGRect(x: 0, y: 0, width: 375, height: 60))
		self.setupHierarchy()
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:375, height:60)
		__scaling__.center = CGPoint(x:187.5, y:30.4)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let datNewBoat = UIImageView()
		datNewBoat.bounds = CGRect(x:0, y:0, width:198.0, height:90.0)
		var imgBoat: UIImage!
		if let imagePath = bundle.pathForResource("Boat.png", ofType:nil) {
			imgBoat = UIImage(contentsOfFile:imagePath)
		}
		datNewBoat.image = imgBoat
		datNewBoat.contentMode = .Center;
		datNewBoat.layer.position = CGPoint(x:187.500, y:38.391)
		datNewBoat.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(datNewBoat)
		viewsByName["DatNewBoat"] = datNewBoat

		self.viewsByName = viewsByName
	}

	// - MARK: Untilted animation

	func addUntiltedAnimation() {
		addUntiltedAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addUntiltedAnimation(completion: ((Bool) -> Void)?) {
		addUntiltedAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addUntiltedAnimation(#removedOnCompletion: Bool) {
		addUntiltedAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addUntiltedAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addUntiltedAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addUntiltedAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 3.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "UntiltedAnimation")
			self.animationCompletions[layer.animationForKey("UntiltedAnimation")] = complete
		}

		let datNewBoatRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		datNewBoatRotationAnimation.duration = 3.000
		datNewBoatRotationAnimation.values = [0.000 as Float, 1.047 as Float, 2.094 as Float, 3.142 as Float, 4.189 as Float, 5.236 as Float, 6.283 as Float]
		datNewBoatRotationAnimation.keyTimes = [0.000 as Float, 0.167 as Float, 0.333 as Float, 0.500 as Float, 0.667 as Float, 0.833 as Float, 1.000 as Float]
		datNewBoatRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		datNewBoatRotationAnimation.beginTime = beginTime
		datNewBoatRotationAnimation.fillMode = fillMode
		datNewBoatRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["DatNewBoat"]?.layer.addAnimation(datNewBoatRotationAnimation, forKey:"Untilted animation_Rotation")

		let datNewBoatScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		datNewBoatScaleXAnimation.duration = 3.000
		datNewBoatScaleXAnimation.values = [0.202 as Float, 0.202 as Float]
		datNewBoatScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		datNewBoatScaleXAnimation.timingFunctions = [linearTiming]
		datNewBoatScaleXAnimation.beginTime = beginTime
		datNewBoatScaleXAnimation.fillMode = fillMode
		datNewBoatScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["DatNewBoat"]?.layer.addAnimation(datNewBoatScaleXAnimation, forKey:"Untilted animation_ScaleX")

		let datNewBoatScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		datNewBoatScaleYAnimation.duration = 3.000
		datNewBoatScaleYAnimation.values = [0.202 as Float, 0.202 as Float]
		datNewBoatScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		datNewBoatScaleYAnimation.timingFunctions = [linearTiming]
		datNewBoatScaleYAnimation.beginTime = beginTime
		datNewBoatScaleYAnimation.fillMode = fillMode
		datNewBoatScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["DatNewBoat"]?.layer.addAnimation(datNewBoatScaleYAnimation, forKey:"Untilted animation_ScaleY")

		let datNewBoatTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		datNewBoatTranslationXAnimation.duration = 3.000
		datNewBoatTranslationXAnimation.values = [-0.001 as Float, -0.348 as Float]
		datNewBoatTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		datNewBoatTranslationXAnimation.timingFunctions = [linearTiming]
		datNewBoatTranslationXAnimation.beginTime = beginTime
		datNewBoatTranslationXAnimation.fillMode = fillMode
		datNewBoatTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["DatNewBoat"]?.layer.addAnimation(datNewBoatTranslationXAnimation, forKey:"Untilted animation_TranslationX")

		let datNewBoatTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		datNewBoatTranslationYAnimation.duration = 3.000
		datNewBoatTranslationYAnimation.values = [-49.223 as Float, -2.716 as Float]
		datNewBoatTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		datNewBoatTranslationYAnimation.timingFunctions = [linearTiming]
		datNewBoatTranslationYAnimation.beginTime = beginTime
		datNewBoatTranslationYAnimation.fillMode = fillMode
		datNewBoatTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["DatNewBoat"]?.layer.addAnimation(datNewBoatTranslationYAnimation, forKey:"Untilted animation_TranslationY")
	}

	func removeUntiltedAnimation() {
		self.layer.removeAnimationForKey("UntiltedAnimation")
		self.viewsByName["DatNewBoat"]?.layer.removeAnimationForKey("Untilted animation_Rotation")
		self.viewsByName["DatNewBoat"]?.layer.removeAnimationForKey("Untilted animation_ScaleX")
		self.viewsByName["DatNewBoat"]?.layer.removeAnimationForKey("Untilted animation_ScaleY")
		self.viewsByName["DatNewBoat"]?.layer.removeAnimationForKey("Untilted animation_TranslationX")
		self.viewsByName["DatNewBoat"]?.layer.removeAnimationForKey("Untilted animation_TranslationY")
	}

	// - MARK: Threshold

	func addThresholdAnimation() {
		addThresholdAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addThresholdAnimation(completion: ((Bool) -> Void)?) {
		addThresholdAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addThresholdAnimation(#removedOnCompletion: Bool) {
		addThresholdAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addThresholdAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addThresholdAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addThresholdAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 3.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Threshold")
			self.animationCompletions[layer.animationForKey("Threshold")] = complete
		}

		let datNewBoatRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		datNewBoatRotationAnimation.duration = 3.000
		datNewBoatRotationAnimation.values = [0.000 as Float, -0.778 as Float, 0.000 as Float, 0.785 as Float, 0.000 as Float, -0.785 as Float, 0.000 as Float]
		datNewBoatRotationAnimation.keyTimes = [0.000 as Float, 0.167 as Float, 0.333 as Float, 0.500 as Float, 0.667 as Float, 0.833 as Float, 1.000 as Float]
		datNewBoatRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		datNewBoatRotationAnimation.beginTime = beginTime
		datNewBoatRotationAnimation.fillMode = fillMode
		datNewBoatRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["DatNewBoat"]?.layer.addAnimation(datNewBoatRotationAnimation, forKey:"Threshold_Rotation")

		let datNewBoatScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		datNewBoatScaleXAnimation.duration = 3.000
		datNewBoatScaleXAnimation.values = [0.200 as Float, 0.200 as Float]
		datNewBoatScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		datNewBoatScaleXAnimation.timingFunctions = [linearTiming]
		datNewBoatScaleXAnimation.beginTime = beginTime
		datNewBoatScaleXAnimation.fillMode = fillMode
		datNewBoatScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["DatNewBoat"]?.layer.addAnimation(datNewBoatScaleXAnimation, forKey:"Threshold_ScaleX")

		let datNewBoatScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		datNewBoatScaleYAnimation.duration = 3.000
		datNewBoatScaleYAnimation.values = [0.200 as Float, 0.200 as Float]
		datNewBoatScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		datNewBoatScaleYAnimation.timingFunctions = [linearTiming]
		datNewBoatScaleYAnimation.beginTime = beginTime
		datNewBoatScaleYAnimation.fillMode = fillMode
		datNewBoatScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["DatNewBoat"]?.layer.addAnimation(datNewBoatScaleYAnimation, forKey:"Threshold_ScaleY")

		let datNewBoatTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		datNewBoatTranslationYAnimation.duration = 3.000
		datNewBoatTranslationYAnimation.values = [-2.000 as Float, -2.000 as Float]
		datNewBoatTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		datNewBoatTranslationYAnimation.timingFunctions = [linearTiming]
		datNewBoatTranslationYAnimation.beginTime = beginTime
		datNewBoatTranslationYAnimation.fillMode = fillMode
		datNewBoatTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["DatNewBoat"]?.layer.addAnimation(datNewBoatTranslationYAnimation, forKey:"Threshold_TranslationY")
	}

	func removeThresholdAnimation() {
		self.layer.removeAnimationForKey("Threshold")
		self.viewsByName["DatNewBoat"]?.layer.removeAnimationForKey("Threshold_Rotation")
		self.viewsByName["DatNewBoat"]?.layer.removeAnimationForKey("Threshold_ScaleX")
		self.viewsByName["DatNewBoat"]?.layer.removeAnimationForKey("Threshold_ScaleY")
		self.viewsByName["DatNewBoat"]?.layer.removeAnimationForKey("Threshold_TranslationY")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Threshold")
		self.layer.removeAnimationForKey("UntiltedAnimation")
	}
}